# Redis 配置文件样例
#
# 为了读取配置redis必须以文件路径作为第一个参数
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# 单位是不区分大小写的

################################## INCLUDES ###################################

# 导入其他文件的配置，该项最好在最后一行
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################

# 默认情况下redis不作为守护进程执行，如果需要启用请设置 yes
daemonize yes

# 当redis在守护进程模式下运行时，保存进程pid的文件路径
pidfile /var/run/redis/redis-server.pid

# 指定redis监听端口，默认6379
# 如果指定0端口，表示redis不监听tcp连接
port 6379

# tcp端口最大监听队列长度，min(backlog, /proc/sys/net/core/somaxconn)。如果服务器负载很大建议修改内核参数
tcp-backlog 511

# 默认监听所有IP地址，可以设置只接受特定的IP地址
bind 0.0.0.0


# 监听来自unix套接字的连接，没有默认值
# unixsocket /var/run/redis/redis.sock
# unixsocketperm 700

# 客户端空闲超过阈值时关闭
timeout 0

# 定时发送 ACKs 确认连接存活，一个合理值是 60
tcp-keepalive 0


# debug 对于开发和测试有用
# verbose 
# notice 适度日志，生产标配
# warning 只记录非常重要的信息
loglevel notice

# 记录日志的文件
logfile /var/log/redis/redis-server.log

# 系统日志记录器，如果开启设置为 yes
# syslog-enabled no

# 指定系统日志的标识
# syslog-ident redis

# 指定设备. Must be USER or between LOCAL0-LOCAL7.
# syslog-facility local0

# 设置数据库的数量，默认 16
databases 16

################################ SNAPSHOTTING  ################################
# save <seconds> <changes>
# 在指定时间内产生指定数量的改变则保存数据库
# 可以注释所有的 save 禁用保存数据库
# save "" 将删除之前的所有 save 设置项

save 900 1
save 300 10
save 60 10000


# 如果快照保存失败，将禁止写操作直到后端保存进程再次开始工作
# 假如你已经设置了对redis服务和持久化的监控你可能需要关闭这一功能
stop-writes-on-bgsave-error yes

# 使用LZF压缩字符串对象
rdbcompression yes

# 5版本后RDB文件增加了一个CRC64的检验和以使得数据更难以破坏，但是会增加10%的性能损耗。可以禁用以获取最大的性能提升
rdbchecksum yes

# 数据库转储的文件名称
dbfilename dump.rdb

# 数据库文件保存的文件夹
dir /var/lib/redis

################################# REPLICATION #################################


# 主从复制
# slaveof <masterip> <masterport>

# 如果主服务器是密码保护的则设置密码
# masterauth <master-password>

# 失去主节点的连接或者复制正在进行时，备份服务器将使用过期的数据回复客户端请求
# 如果设置为 no，将返回一个同步异常
slave-serve-stale-data yes

# 如果作为从服务器则只允许读操作
slave-read-only yes


# 同步策略的两种方式，第一种是先把数据保存到磁盘然后开始增量复制，第二种直接把数据通过套接字发送给从服务器不经过磁盘
# 第二种处于实验状态，默认是第一种同步策略
# 对于慢磁盘操作和快速网络而言，无磁盘工作方式更佳
repl-diskless-sync no

# 无磁盘同步策略等待从服务器到达的时间
repl-diskless-sync-delay 5

# 从服务器默认10s发送 PINGs
# repl-ping-slave-period 10

# 同步过程中批量IO超时
# 从服务器超过时间没有发送 PINGs
# 主服务器超过时间没有回复 PINGs
# 这个值必须大于 repl-ping-slave-period 的值
# repl-timeout 60


# 设置为 yes，将使用更少的TCP包和更少的带宽将数据发送给从服务器，但是会增加从服务器的同步延时
# 设置为 no，带宽占用增加但是会减少同步延时
repl-disable-tcp-nodelay no


# 缓冲区，当从服务器断开连接重连时不需要完全同步，只需要部分同步就可以了。缓冲区越大则从服务器可以断开的时间更长。
# 至少有一个从服务器缓冲区才会被创建
# repl-backlog-size 1mb


# 当所有从服务器断开连接指定时间之后释放缓冲区，0表示从不释放
# repl-backlog-ttl 3600


# 从节点优先级，数值越小在选举中权重越大，0表示永远不会成为主节点
slave-priority 100


# 任何一个设置为0都将禁用该功能
# 如果从节点小于N，并且延时<=M, 主节点拒绝写操作，默认N=0, M=10
# min-slaves-to-write 3
# min-slaves-max-lag 10


################################## SECURITY ###################################

# 设置外部访问的密码，需要一个强度非常高的密码，因为redis非常块，能达到150k/s暴力破解
# requirepass foobared

# 命令重命名，在外部使用重命名的命令在内部仍然可以使用原命令
# AOF文件中命令与传递到从节点的命令可能有问题
# 重命名一个不容易猜到的字符串
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# 禁用命令
# rename-command CONFIG ""


################################### LIMITS ####################################


# 最大客户端连接数，默认一万。也跟系统允许的文件描述符有关
# maxclients 10000


# 最大内存占用
# maxmemory <bytes>


# 内存占用达到上限时的清理策略
# volatile-lru -> 使用LRU算法删除具有过期设置的key
# allkeys-lru -> 使用LRU算法删除随机key
# volatile-random -> 删除带有过期设置的随机key
# allkeys-random -> 删除随机的任意key
# volatile-ttl -> 删除最近过期时间的key
# noeviction -> 完全不过期，所有写操作都将返回error
#
# maxmemory-policy noeviction

# LRU算法选择五个可以并挑选最差的一个
# 5居中，10最接近预期结果但是占用更多CPU，3速度非常快但是不精确
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################

# 是否开启AOF
appendonly no

# AOF 日志文件名
appendfilename "appendonly.aof"


# always 每次更新都要同步到磁盘(慢，但更安全)
# no 禁止手动调动等操作系统自动调用(快)
# everysec 每秒手动调用一次(折中方案)
appendfsync everysec


# 调用 fsync 可能会导致阻塞
# 禁止BGSAVE or BGREWRITEAOF在主进程中调用fsync，最坏的情况下会损失30s的日志
no-appendfsync-on-rewrite no


# aof文件重写的百分比
# aof文件重写的最小大小
# 文件重写为了避免很多无效的数据
auto-aof-rewrite-percentage 200
auto-aof-rewrite-min-size 64mb


# 由于服务器原因aof文件可能在末尾被截断，yes表示加载尽可能多的数据，no表示redis不会启动用户需要自己检查aof文件
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# lua脚本执行的最大时间，超过redis将记录脚本并使用异常答复查询
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# 节点集群支持
# cluster-enabled yes


# 每个集群节点都需要一个集群配置文件，每个节点需要改变此值以表示不同
# cluster-config-file nodes-6379.conf

# 集群节点超时(不可达)
# cluster-node-timeout 15000

# 从节点不会启用故障切换的倍率，太大会导致从节点数据老旧，太小不利于集群选举
# cluster-slave-validity-factor 10


# 集群从服务器会迁移到没有从服务器的主服务器上以保证集群的稳定性，只有再确认当前主服务器有至少几个从服务器是才会迁移
# 这个值也可以看做是主服务器的备份数
# cluster-migration-barrier 1


# 当一个集群节点故障时集群将会不可用直到故障节点恢复，如果你希望集群的子集继续服务的话可以设置为no
# cluster-require-full-coverage yes

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.

# 1000000 = 1s
# 触发慢日志记录的时间，负数表示禁用，0表示记录所有
slowlog-log-slower-than 10000

# 慢日志队列长度，没有限制但会消耗内存
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# 0表示延迟监视被禁止使用，<milliseconds> 表示延迟多长时间将被记录
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# redis键被操作可以通知订阅的客户端
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
# 默认是禁用通知
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# 数量和长度满足以下条件时使用 ziplist编码
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

list-max-ziplist-entries 512
list-max-ziplist-value 64

zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# 集合只由字符串组成，并且是64位有符号的10进制表示
# 特殊集合编码的数量大小
set-max-intset-entries 512


# 稀疏编码的长度限制
hll-sparse-max-bytes 3000

# 从100毫秒的cpu时间抽出1毫秒来重建哈希表
activerehashing yes


# 客户端请求速度大于读取速度，会产生很大的缓存，避免这种情况
# 普通的客户端不做限制
client-output-buffer-limit normal 0 0 0
# 备份节点硬限制256mb，软限制在 60s内一直达到64mb
client-output-buffer-limit slave 256mb 64mb 60
# 订阅客户端硬限制32mb，软限制 60s内一直达到8mb
client-output-buffer-limit pubsub 32mb 8mb 60


# 1-500之间，大部分选择是10，只有在需要低延迟环境中选择100，超过100不提倡
hz 10

# aof重写没32mb调用一次fsync
aof-rewrite-incremental-fsync yes
